//#include<iostream>
//using namespace std;
//
//int main() {
//	/*인라인 키워드, 타입 디파인, 상속
//	
//	1. 인라인 키워드
//	1) 짧을 때 써야 한다.
//	2) 오버헤드
//	2. 타입 디파인
//	3. 상속
//	1)fstream
//	2)자식클래스:public 부모클래스
//	3)프라이빗 또는 프로텍티드 가능은 하지만 많이 안쓴다.
//
//	c_stl 없어도 상관없음
//	DocWriter(fileName, content) ->초기화
//	of -> 파일로 보냄(cout아님)
//	
//	딜리게이션 (위임) ::
//	부모가 가진 기능으로 해결! 
//
//	초기화하는 과정에서 부모클래스의 생성자를 가져온다.-> 인보케이션(호출) : 
//		
//
//	어캐스트랑 다운캐스트의 전제조전 : 상속
//
//	부모 -> 자식 (어캐스트)
//	자식 -> 부모 (다운 캐스트)
//
//
//	1) 명시적 캐스팅
//	2) 원본이 부모거이면 다운캐스트 안됨
//	   원본이 자식거이면 다운캐스트 됨
//	3) 버츄얼 부모클래스의 메소드 
//	   버츄얼 -> 자바의 추상
//
//
//
//	순수가상함수 -> 인터페이스
//
//
//	예외처리 -> 인덱스 범위 벗어날 때
//
//	11-1번 예제코드
//
//	딜리게이션 -> 위임
//
//
//
//	호출 -> 자식이 부모꺼 호출 가능!
//
//	인보케이션 - > 부보클래스의 메소드를 호출한다
//
//	프로텍티드 -> 상속관계에서 게터,세터 없이 쓰기
//
//	SRP - > 단일체계 원칙
//	OCP - >
//	LSP - > 모든 자식클래스의 객체는 부모클래스에 사용을 할 수 있다.(디자인 원칙)
//	ISP - >
//	DIP - >
//	
//	*/
//
//
//	return 0;
//}